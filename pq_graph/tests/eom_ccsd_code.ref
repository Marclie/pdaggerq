#!/usr/bin/env python
"""
Full diagonalization of the EOM-CCSD similarity-transformed Hamiltonian

"""
import numpy as np
from numpy import einsum
    
def kernel(t1, t2, fock, g, o, v, e_ai, e_abij, max_iter=100, stopping_eps=1.0E-14,
           diis_size=None, diis_start_cycle=4):

    # initialize diis if diis_size is not None
    # else normal scf iterate
    if diis_size is not None:
        from diis import DIIS
        diis_update = DIIS(diis_size, start_iter=diis_start_cycle)
        t1_dim = t1.size
        old_vec = np.hstack((t1.flatten(), t2.flatten()))

    fock_e_ai = np.reciprocal(e_ai)
    fock_e_abij = np.reciprocal(e_abij)
    f_map, g_map, Id_map = integral_maps(fock, g, o, v)
    old_energy = ccsd_energy(t1, t2, fock, g, o, v)
    for idx in range(max_iter):

        singles_res, doubles_res = residuals(t1, t2, f_map, g_map)

        singles_res += fock_e_ai * t1
        doubles_res += fock_e_abij * t2

        new_singles = singles_res * e_ai
        new_doubles = doubles_res * e_abij

        # diis update
        if diis_size is not None:
            vectorized_iterate = np.hstack(
                (new_singles.flatten(), new_doubles.flatten()))
            error_vec = old_vec - vectorized_iterate
            new_vectorized_iterate = diis_update.compute_new_vec(vectorized_iterate,
                                                                 error_vec)
            new_singles = new_vectorized_iterate[:t1_dim].reshape(t1.shape)
            new_doubles = new_vectorized_iterate[t1_dim:].reshape(t2.shape)
            old_vec = new_vectorized_iterate

        current_energy = ccsd_energy(new_singles, new_doubles, fock, g, o, v)
        delta_e = np.abs(old_energy - current_energy)

        if delta_e < stopping_eps:
            return new_singles, new_doubles
        else:
            t1 = new_singles
            t2 = new_doubles
            old_energy = current_energy
            print("\tIteration {: 5d}\t{: 5.15f}\t{: 5.15f}".format(idx, old_energy, delta_e))
    else:
        print("Did not converge")
        return new_singles, new_doubles


def main():
    from itertools import product
    import pyscf
    import openfermion as of
    from openfermion.chem.molecular_data import spinorb_from_spatial
    from openfermionpyscf import run_pyscf
    from pyscf.cc.addons import spatial2spin
    import numpy as np


    basis = '6-31g'
    mol = pyscf.M(
        atom='B 0 0 0; H 0 0 {}'.format(1.6),
        basis=basis,

    )

    mf = mol.RHF(conv_tol=1.0e-12).run()
    mycc = mf.CCSD().run()
    print('CCSD correlation energy', mycc.e_corr)

    molecule = of.MolecularData(geometry=[['B', (0, 0, 0)], ['H', (0, 0, 1.6)]],
                                basis=basis, charge=0, multiplicity=1)
    molecule = run_pyscf(molecule, run_ccsd=True)
    oei, tei = molecule.get_integrals()
    norbs = int(mf.mo_coeff.shape[1])
    occ = mf.mo_occ
    nele = int(sum(occ))
    nocc = nele // 2
    assert np.allclose(np.transpose(mycc.t2, [1, 0, 3, 2]), mycc.t2)

    soei, stei = spinorb_from_spatial(oei, tei)
    astei = np.einsum('ijkl', stei) - np.einsum('ijlk', stei)

    # put in physics notation. OpenFermion stores <12|2'1'>
    gtei = astei.transpose(0, 1, 3, 2)

    eps = np.kron(molecule.orbital_energies, np.ones(2))
    n = np.newaxis
    o = slice(None, 2 * nocc)
    v = slice(2 * nocc, None)

    e_abij = 1 / (-eps[v, n, n, n] - eps[n, v, n, n] + eps[n, n, o, n] + eps[
        n, n, n, o])
    e_ai = 1 / (-eps[v, n] + eps[n, o])

    fock = soei + np.einsum('piiq->pq', astei[:, o, o, :])
    hf_energy = 0.5 * np.einsum('ii', (fock + soei)[o, o])
    hf_energy_test = 1.0 * einsum('ii', fock[o, o]) -0.5 * einsum('ijij', gtei[o, o, o, o])
    #print(hf_energy_test, hf_energy)
    assert np.isclose(hf_energy + molecule.nuclear_repulsion, molecule.hf_energy)

    g = gtei
    nsvirt = 2 * (norbs - nocc)
    nsocc = 2 * nocc
    #t1f, t2f = kernel(np.zeros((nsvirt, nsocc)), np.zeros((nsvirt, nsvirt, nsocc, nsocc)), fock, g, o, v, e_ai, e_abij)
    #print(ccsd_energy(t1f, t2f, fock, g, o, v) - hf_energy)

    t1f, t2f = kernel(np.zeros((nsvirt, nsocc)), np.zeros((nsvirt, nsvirt, nsocc, nsocc)), fock, g, o, v, e_ai, e_abij,
                      diis_size=8, diis_start_cycle=4)
    #print(ccsd_energy(t1f, t2f, fock, g, o, v) - hf_energy)

    # now eom-ccsd?
    #kd = np.eye(fock.shape[0])
    kd = np.zeros((2*norbs,2*norbs))
    for i in range (0,2*norbs):
        kd[i,i] = 1.0

    f_map, g_map, Id_map = integral_maps(fock, g, o, v)
    H00, Hs0, H0s, Hd0, H0d, Hss, Hsd, Hds, Hdd = build_Hbar(t1f, t2f, f_map, g_map, Id_map)

    dim = int(1 + nsvirt*(nsvirt-1)/2*nsocc*(nsocc-1)/2 + nsvirt*nsocc)
    H = np.zeros((dim,dim))

    # 00 block
    H[0,0] = H00

    # 0s, s0 blocks
    for a in range (0,nsvirt):
        for i in range (0,nsocc):
            ai = 1 + a*nsocc + i
            H[ai,0] = Hs0[a,i]
            H[0,ai] = H0s[a,i]

    # ss block
    for a in range (0,nsvirt):
        for i in range (0,nsocc):
            ai = 1 + a*nsocc + i
            for e in range (0,nsvirt):
                for m in range (0,nsocc):
                    em = 1 + e*nsocc + m
                    H[ai,em] = Hss[a,i,e,m]

    # sd, ds blocks
    for a in range (0,nsvirt):
        for i in range (0,nsocc):
            ai = 1 + a*nsocc + i
            efmn = 1 + nsocc*nsvirt
            for e in range (0,nsvirt):
                for f in range (e+1,nsvirt):
                    for m in range (0,nsocc):
                        for n in range (m+1,nsocc):
                            H[ai,efmn] = Hsd[a,i,e,f,m,n]
                            H[efmn,ai] = Hds[e,f,m,n,a,i]
                            efmn += 1

    # 0d, d0 blocks
    abij = 1 + nsocc*nsvirt
    for a in range (0,nsvirt):
        for b in range (a+1,nsvirt):
            for i in range (0,nsocc):
                for j in range (i+1,nsocc):
                    H[abij,0] = Hd0[a,b,i,j]
                    H[0,abij] = H0d[a,b,i,j]
                    abij += 1

    # dd blocks
    abij = 1 + nsocc*nsvirt
    for a in range (0,nsvirt):
        for b in range (a+1,nsvirt):
            for i in range (0,nsocc):
                for j in range (i+1,nsocc):
                    efmn = 1 + nsocc*nsvirt
                    for e in range (0,nsvirt):
                        for f in range (e+1,nsvirt):
                            for m in range (0,nsocc):
                                for n in range (m+1,nsocc):
                                    H[abij,efmn] = Hdd[a,b,i,j,e,f,m,n]
                                    efmn += 1
                    abij += 1

    cc_energy = ccsd_energy(t1f, t2f, fock, g, o, v)
    print('    ccsd energy: %20.12f' % (cc_energy + molecule.nuclear_repulsion) )

    print('')
    print('    eigenvalues of e(-T) H e(T):')
    print('')

    print('    %20s %20s' % ('total energy','excitation energy'))
    en, vec = np.linalg.eig(H)

    # sort eigenvalues
    idx = en.argsort()
    en = en[idx]
    vec = vec[:,idx]

    for i in range (0,len(en)):
        print('    %20.12f %20.12f' % ( en[i] + molecule.nuclear_repulsion,en[i]-cc_energy))

    print('')

    # build reference energies
    ref_states = [20.053775115060,18.994590756145,18.594853950311,18.585747844967,18.729352504656,18.723379555566,18.940007281232,18.940007281232,18.940007281232,18.240597278181,18.729352504656,18.200988552339,18.585747844967,18.585747844967,18.723379555566,18.723379555566,18.723379555566,16.982603203685,16.954816345539,17.204117787445,17.447726685297,17.996382361070,17.392655484380,17.392655484380,18.091370679071,18.138906849526,18.138906849526,18.138906849526,17.142960665087,17.142960665087,17.142960665087,18.091370679071,17.926051266678,17.762504269997,18.021257875167,18.021257875167,17.914114172168,17.914114172168,17.841182408785,17.765556952412,17.765556952412,17.841182408785,17.918688823920,17.918688823920,17.918688823920,17.876989691297,17.876989691297,17.876989691297,17.725087782567,17.725087782567,17.723625460954,17.723625460954,17.723625460954,17.723625460954,16.239198992771,18.723379555566,18.723379555566,16.199580179877,16.776636853066,16.125476187103,16.199580179877,17.246142473266,16.893589282294,17.392655484380,16.457187834032,18.021257875167,17.246142473266,16.125476187103,16.457187834032,16.954816345539,17.082553468363,18.021257875167,16.922952286980,17.082553468363,16.125476187104,17.765556952412,16.929217768523,18.021257875167,18.021257875167,17.232483841380,17.232483841380,16.929217768523,16.393608735549,16.393608735549,16.393608735548,16.922952286980,17.765556952412,16.925285355891,16.922952286980,16.864511261567,16.908581884852,16.925285355891,17.067978976051,17.067978976051,16.864511261567,16.908581884852,16.925285355891,17.232483841380,16.864511261567,16.908581884852,16.393608735549,17.232483841380,17.067978976051,17.067978976051,17.765556952412,17.723625460954,17.765556952412,16.908581884852,17.232483841380,16.864511261567,17.723625460954,16.908581884852,17.067978976051,16.393608735549,16.864511261567,16.908581884852,-0.000000000000,17.232483841380,16.393608735549,17.067978976051,16.864511261567,0.051760213394,0.051760213394,0.107492929555,0.191634758340,0.107492929555,0.051760213393,0.051760213393,0.051760213393,0.313852937982,0.191634758341,0.191634758341,0.252826554949,0.252826554949,0.277386956871,0.277386956870,0.205526329464,0.332713756292,0.205526329464,0.205526329464,0.218569398509,0.218569398509,0.218569398509,0.468845442052,0.443952547702,0.414551171018,0.325936777852,0.335414027865,0.325936777852,0.414551171017,0.398064813093,0.398064813093,0.398064813094,0.335414027865,0.335414027865,0.335414027865,0.335414027865,10.747063697422,10.680775666490,3.425137878264,10.680775666490,10.680775666490,2.860840714432,2.773249272872,2.773249272873,0.051760213394,10.014321690201,10.003237402257,2.773249272872,2.413980748532,2.400095982481,2.392930883714,0.218569398509,0.252826554949,2.235871556674,2.228674893882,0.218569398509,0.252826554949,2.182040077653,2.201246975607,2.392930883714,2.392930883714,0.252826554949,2.211705648811,2.217721018524,2.121067744855,2.107008421080,0.218569398509,0.443952547702,0.503141387873,0.457207037678,0.414551171018,0.563283744258,0.553678052153,0.503141387872,0.463237383777,0.457207037678,0.469972872473,0.443952547702,0.463237383777,0.469972872474,0.457207037678,0.495974455837,0.469972872474,0.664976046471,0.645608483112,0.397341268389,0.495974455837,0.699370707728,0.495974455837,0.397341268389,0.398064813093,0.577715108887,0.568662193123,0.335414027865,0.665283317612,0.719171088662,0.716175807005,0.577715108887,0.397341268390,0.568662193123,0.716266503895,0.643669689613,0.398064813093,0.584497976463,0.568662193123,0.643669689613,0.397341268390,0.584497976463,0.623098057061,0.623098057061,0.584497976463,0.623098057060,0.644929502371,0.644929502371,0.644929502371,10.003237402257,10.003237402257,9.707634551362,9.650038970743,9.688271349756,9.688271349756,2.217721018524,2.201246975607,2.201246975607,2.042166833108,2.024545934622,2.121067744854,2.001595931208,1.992861114862,2.211705648812,2.211705648812,2.121067744854,2.038940131753,2.066299276821,2.020322517146,0.335414027865,2.211705648812,0.398064813093,1.986612568566,2.038940131753,0.397341268389,2.020322517147,2.066299276821,2.051100908416,2.051100908416,0.495974455837,1.986612568566,0.665283317612,0.397341268389,0.495974455837,0.814518749257,0.732317579325,0.758229840994,0.643669689613,0.495974455837,0.732317579326,0.730072158597,0.790729033705,0.773080729248,0.773400138607,0.623098057061,0.793900111121,0.773400138607,0.584497976463,0.781091529601,0.584497976463,0.716175807005,0.716175807005,0.730264975909,0.716266503895,0.781091529601,0.790729033705,0.793900111121,0.644929502371,0.730264975909,0.716266503895,0.781091529602,0.793900111121,0.730264975909,9.638713504002,9.688271349756,9.600196667278,9.600196667277,9.638713504003,9.638713504003,9.569036455066,9.569036455066,9.487495426617,9.600196667278,9.485276100499,9.569036455066,0.335414027865,1.919904256247,1.931504406794,1.930451298570,2.211705648811,1.941166264355,2.038940131753,1.889257657939,1.984647504846,1.941166264355,0.335414027865,1.939714054151,1.939714054150,0.862368079496,0.730072158596,0.758229840994,0.732317579326,0.817700049244,0.826806003444,0.824912881814,0.817700049244,0.835137175230,0.835137175230,0.816833466210,0.816833466210,0.790729033705,0.773080729248,0.773080729248,0.773400138607,9.569036455067,9.392206643229,9.485276100499,9.485276100499,9.452137578708,9.456650295606,9.456650295606,9.421746311616,9.421746311616,2.211705648811,0.335414027865,2.020322517147,1.931504406794,1.842570609155,1.986612568566,1.984647504846,1.818353296441,1.797877951431,1.930451298570,2.018759022671,1.900956195992,1.878785283815,1.849530286904,2.018759022671,2.018759022671,1.930451298570,1.888533896471,0.584497976463,0.623098057061,0.623098057061,1.888533896471,1.867829087548,0.644929502371,0.875845634150,0.892742710735,0.879620024851,1.867829087548,0.848894596513,0.716266503895,0.840901553587,0.827107023456,0.826806003444,0.816833466211,0.824912881814,0.827107023457,0.793900111121,9.569036455066,9.452137578707,7.047313641322,9.263475849538,9.452137578708,9.368013993037,9.368013993037,9.452137578708,9.414177155349,9.368013993037,9.298258160923,9.365467402216,9.377469595008,9.414177155349,9.414177155349,9.298258160923,9.365467402216,9.377469595008,1.760494440857,1.941166264355,9.414177155349,1.805636096154,1.900956195992,1.837008701775,0.923941032670,1.837008701775,0.848894596513,0.716266503895,0.730264975908,0.840901553587,0.781091529602,0.781091529601,1.837008701775,7.077299220664,7.047313641322,7.077299220664,9.272058947141,9.236832901092,9.298258160922,9.452137578708,9.272058947141,9.377469595008,9.236832901092,9.365467402216,1.878785283815,1.984647504846,1.849530286904,1.820104128660,1.984647504846,1.888533896471,1.900956195992,1.730294094442,1.805636096154,0.644929502371,1.849530286904,0.943319715539,0.966324478471,0.929647985082,0.879620024850,0.883893152495,0.817700049244,0.884024295282,0.883893152495,0.906859410556,0.865558056548,0.848894596513,0.906859410556,0.906859410556,0.827107023456,0.826806003444,0.826806003444,0.840901553587,0.865558056548,0.865558056548,9.272058947141,9.377469595008,9.365467402216,2.018759022671,1.713472339393,1.867829087548,1.735425003686,1.805636096154,2.018759022671,1.900956195992,0.773080729248,0.995450399747,0.781091529602,1.010439001769,1.001828343874,1.001828343873,0.892742710734,0.987117695089,0.974050305889,0.974050305889,0.947119619968,0.910500941239,0.892742710734,0.947119619968,0.910500941239,0.884024295282,0.912112775470,0.944871105604,0.883893152494,0.928238421075,0.912112775470,0.935762778344,0.928238421074,0.928238421074,0.987117695089,0.949346316304,0.944871105604,0.944871105604,0.935762778344,0.949346316304,9.183159587854,7.101236731201,7.047313641322,9.236832901092,7.077299220664,7.101236731200,7.077299220664,1.787206778794,1.735425003686,1.849530286904,0.966324478471,9.414177155349,9.160008602830,7.166480307249,9.142977081569,7.166480307249,1.820104128660,2.018759022671,1.787206778795,0.730264975908,0.989052814514,0.793900111121,0.892742710735,0.966324478471,0.910500941239,9.452137578707,7.047313641322,9.377469595008,7.204275571956,9.160008602831,9.377469595008,7.047313641322,9.365467402216,1.984647504846,1.688634911443,1.724846480289,1.984647504846,1.046109201227,0.716266503895,0.974050305889,0.840901553587,0.883893152495,9.414177155349,9.118689241213,9.108781921214,9.272058947141,9.102508061201,7.077299220664,7.204275571956,7.166480307249,9.272058947141,9.160008602831,1.712697321088,1.820104128660,1.028659998071,0.773080729248,0.969002343145,0.865558056548,0.906859410556,7.211249684178,7.047313641322,7.261183501577,7.272109249559,7.259670838413,7.239520460014,7.239138508361,7.243861358904,7.243861358904,1.062844951683,1.054945858726,1.038947541048,1.010439001769,0.987117695089,1.021564825149,1.021564825149,1.010439001769,0.969002343145,0.935762778344,9.118689241213,9.365467402216,9.070401465991,9.104980314285,9.118689241213,7.239138508361,7.239520460014,7.239520460015,1.688634911442,1.900956195992,1.724846480289,1.787206778794,1.820104128660,0.730264975908,0.827107023456,0.944871105604,9.067775409781,9.102508061201,9.043618490479,7.204275571956,9.104980314285,7.211249684177,7.211249684178,7.243861358904,1.849530286904,1.735425003686,1.712697321088,1.688634911443,1.128387843180,1.087141943609,0.947119619968,0.949346316304,9.365467402216,9.365467402216,9.365467402216,1.900956195992,1.670919626158,1.662666390710,1.600409577372,1.620747648497,1.619628171207,1.670919626158,1.712697321088,1.184802769081,1.102308201203,1.079110690210,1.046351247584,0.989052814513,1.054945858727,1.038947541048,0.966324478471,9.102508061201,7.291288904768,9.033484692954,9.067775409781,9.074462916558,9.006168067009,9.067775409781,9.074462916558,1.820104128659,1.820104128660,1.607234282134,0.773080729248,0.826806003444,0.840901553587,1.079110690210,0.883893152495,0.910500941239,0.865558056547,0.906859410556,7.291288904768,9.033484692954,9.074462916558,7.211249684178,7.348803468110,9.006168067009,7.291288904768,7.211249684178,7.211249684178,1.787206778794,1.662666390709,1.619628171207,1.214379231724,0.781091529601,1.126839811727,1.102308201202,1.075563982892,1.075563982892,0.935762778344,0.935762778344,9.365467402216,9.018410245106,7.384842048611,8.991777102584,8.984514810262,7.310714280988,7.310714280988,7.348803468110,9.033484692954,7.329722154869,7.291288904767,1.746124163811,1.787206778794,1.651993920056,1.578117510333,1.264148672285,1.712697321088,1.712697321088,1.171579806499,0.827107023456,1.054945858727,0.969002343145,0.949346316304,0.944871105604,8.984514810262,9.018410245106,9.074462916558,7.384842048612,7.237478487917,9.018410245106,7.384842048611,7.329722154869,7.310714280988,8.984514810262,1.746124163811,1.607234282134,1.557638276410,1.544074689161,1.585028992798,1.555896323643,1.662666390709,1.661187487219,1.251437515750,1.236357594900,1.661187487219,1.127777779322,0.840901553587,1.157462578482,1.046351247584,1.157462578482,1.046351247584,1.038947541048,9.018410245106,1.787206778794,1.746124163811,0.781091529601,1.578117510333,1.651383658989,1.535767865282,1.651993920055,1.585028992798,1.651993920056,1.276840712036,1.651383658989,1.223692581323,1.236357594900,1.223692581323,0.982281146109,1.219251865780,1.127777779322,1.219251865781,0.982281146109,1.079110690210,1.098699785209,1.126839811727,1.030256622024,1.098699785209,1.157462578482,1.028144846632,1.126839811727,1.028144846632,1.030256622024,1.063103154262,1.063103154263,1.030256622024,1.028144846632,9.006168067009,8.991777102584,7.237478487917,9.074462916557,8.991777102584,1.619628171207,1.328995317090,0.892742710734,8.930110817975,7.291288904768,7.442329575263,9.018410245106,7.329722154869,7.237478487917,1.607234282134,1.279494205901,1.259692015266,1.209100140762,1.171579806499,0.826806003444,1.094380452625,0.827107023456,0.910500941239,0.906859410556,7.310714280988,9.074462916557,8.905459991085,7.442329575263,7.310714280988,8.925033603018,8.991777102584,7.329722154869,7.237478487917,1.746124163811,1.521583190378,1.555896323643,1.640792373043,1.537480883118,1.558739237376,0.781091529601,1.259692015266,1.209100140762,0.982281146109,0.982281146109,8.991777102584,7.237478487917,8.903025036660,7.497366749160,7.442329575262,8.923375436364,8.923375436364,7.497366749159,7.442329575263,7.329722154869,8.925033603017,7.310714280988,7.487471657245,1.746124163811,1.537695180135,1.323801865843,1.640792373043,1.558739237376,1.660145119950,1.660145119950,0.865558056548,1.092460198883,1.094380452625,1.063103154262,0.944871105604,0.949346316304,0.969002343145,1.030256622024,0.969002343145,0.982281146109,8.925033603017,7.487471657245,7.237478487917,7.237478487917,1.510054072847,1.533616037936,1.460535158360,1.442405255096,1.537695180135,1.236357594899,1.381866516813,1.223692581323,1.614698882323,1.279458217419,1.614698882323,1.360156658215,1.357766967567,1.319879899100,1.334507436108,1.334507436108,1.319879899100,1.279458217420,1.028144846632,1.651058804359,1.092460198883,1.209100140762,1.651058804359,1.640792373042,1.640792373042,1.651058804359,1.094380452625,1.030256622024,1.151046965700,1.151046965700,7.542476062699,8.858548600960,7.329722154869,1.746124163811,1.555896323643,1.502368160836,1.469808312636,1.537480883117,1.443133293497,1.346547033365,1.305746082939,1.063103154262,8.903025036660,8.897926833011,7.532224131089,7.487471657245,8.903025036660,8.897926833011,1.660145119950,0.966324478471,1.371047213461,1.537695180135,1.168914072388,1.028144846632,1.334507436108,1.305746082939,1.112140685389,1.323801865843,1.323801865843,1.092460198883,1.092460198884,1.319879899100,1.112140685389,1.151046965699,1.063103154263,8.836210270163,8.852574197860,7.237478487917,7.532224131090,8.876765250163,8.874832296247,8.915860031375,7.479723109599,8.915860031375,8.874832296247,1.533616037935,1.279458217419,1.360156658216,1.614698882323,1.614698882323,1.346547033365,1.371047213461,1.112140685389,7.479723109600,1.746124163811,0.865558056548,1.507794386764,1.651058804359,1.561503342239,1.537480883117,0.949346316304,1.426175743498,1.443133293496,1.251485636116,1.389467516600,1.168914072388,1.094380452625,1.660145119950,1.660145119949,1.112140685389,1.660145119950,1.298632240112,1.360156658216,1.298632240112,1.092460198884,7.442329575263,7.556945264215,7.442329575262,1.640792373043,0.781091529601,0.827107023456,1.357766967567,1.030256622024,1.251485636116,8.852574197860,7.237478487917,7.556945264216,8.874832296248,7.479723109600,8.915860031375,1.746124163811,1.469808312636,0.935762778344,1.391096446363,1.307376187238,1.094380452624,1.391096446363,1.307376187237,0.982281146109,7.601604366583,7.237478487917,7.459800273569,8.852574197860,8.826765489507,8.823079366278,8.818209322642,8.893223553028,7.479723109600,8.915860031375,8.893223553027,8.790853552370,8.798870922970,8.798870922970,8.867256368331,8.867256368331,8.867256368331,8.823079366278,7.479723109599,8.818209322641,8.826765489507,1.561503342239,1.640792373043,1.489281520379,1.482784627958,1.455130496717,1.450151150301,1.377876810234,1.281373401844,1.507794386763,1.028144846632,1.507794386763,1.151046965699,1.151046965700,1.307376187238,1.391096446363,7.556945264215,7.459800273568,7.604149367328,8.790853552370,8.915860031375,8.893223553028,0.910500941239,1.651058804359,1.389467516600,1.561503342239,1.450151150301,1.281373401844,1.482784627958,1.298632240112,8.915860031375,8.893223553028,8.790853552371,1.614698882323,1.168914072388,1.112140685389,1.168914072388,1.251485636116,1.499491532732,1.208921097803,1.408116171609,1.455130496717,1.426972109630,1.365462873492,1.377876810234,1.208921097803,1.208921097804,1.450151150301,1.298632240112,1.368952199205,1.368952199206,1.499491532732,8.760269003761,8.724916650446,8.760269003760,8.826765489507,8.867256368331,1.746124163811,1.651058804359,1.614698882323,1.469808312636,1.251485636116,1.377876810234,7.604149367327,7.459800273568,8.877026297320,8.757447070809,8.798870922970,8.821317733963,8.821317733962,7.604149367328,1.746124163811,0.969002343145,1.561503342239,1.112140685389,1.408116171609,1.389467516600,1.489281520379,1.168914072388,1.151046965699,1.281373401844,1.281373401844,1.489281520379,1.298632240112,7.479723109599,7.647802139216,7.459800273568,8.713796309493,8.893223553028,8.877026297320,7.576914517482,7.574213330394,7.576914517482,8.757447070809,8.800720626927,8.867256368331,7.574213330394,7.574213330394,8.826765489507,8.760269003761,8.800720626927,1.365462873492,1.307376187238,1.377876810234,7.625011137404,7.625011137404,8.877026297320,8.821317733962,7.574213330394,1.094380452624,1.561503342239,1.208921097803,1.426972109631,1.251485636116,1.408116171609,1.365462873492,1.368952199205,1.426972109631,1.408116171609,1.208921097803,1.281373401844,7.688142564031,7.459800273568,8.730293153668,8.719736667241,8.893223553027,8.719736667241,8.826765489507,8.877026297320,0.827107023456,0.865558056548,1.168914072388,1.307376187238,1.365462873492,8.771259953348,8.821317733962,8.800720626927,7.695172697557,7.668477896217,8.771259953348,7.668477896218,7.632423644658,7.643362350305,7.643362350305,1.063103154263,7.576914517482,7.576914517482,7.574213330394,1.561503342239,1.251485636116,1.298632240112,1.377876810234,1.368952199205,8.637171976385,8.730293153668,7.459800273568,7.459800273569,7.459800273568,7.691782424181,7.668477896218,7.632423644658,7.691782424181,1.151046965700,1.208921097803,1.307376187238,1.505097026103,7.576914517482,7.576914517482,7.643325991894,1.393431701277,1.393431701277,1.426972109631,7.643325991895,7.657252458435,1.408116171609,7.643325991894,7.657252458434,7.657252458434,1.365462873492,1.487167518768,1.492674128789,1.498637478279,1.462948238430,7.657252458434,1.429188717883,1.487167518768,1.498637478278,7.657252458434,1.462948238430,1.429188717883,1.487167518768,1.492674128789,8.867256368331,8.821317733962,8.877026297320,7.746572109253,0.827107023456,7.459800273568,7.628335937962,7.574213330394,7.632423644658,1.449144005449,1.505097026103,1.368952199205,8.659241143006,8.686666153087,8.771259953348,8.800720626927,8.637171976385,7.766163015074,7.740639111902,7.643362350305,7.628335937962,1.092460198884,1.281373401844,1.396474792810,1.449144005449,1.393431701277,1.393431701277,1.462948238430,1.462948238430,8.877026297320,8.590476875099,8.771259953348,8.531123293829,8.534385721513,8.552655228170,8.691116601503,8.664805409729,8.685355168523,7.781524628530,8.637171976385,8.655303232452,8.685355168523,7.459800273568,7.718744342190,7.716356223377,8.655483351983,7.716356223377,8.655483351984,7.628335937962,1.505097026103,1.396474792810,1.429188717883,1.498637478279,1.487167518768,1.492674128789,7.632423644658,1.449144005449,7.632423644658,1.426972109631,1.429188717882,1.505097026103,8.714920794050,8.691116601503,8.714920794050,8.664805409729,8.680489486652,1.498637478279,1.487167518768,8.680489486652,1.492674128789,8.685355168523,8.655303232451,7.770188495940,7.704978319372,7.770188495941,7.704978319371,7.716356223377,7.643325991894,7.718744342190,7.718744342190,7.703173286401,7.703173286401,8.655303232451,8.877026297320,8.771259953348,1.151046965699,7.766163015073,7.740639111902,7.740639111902,1.365462873492,0.865558056548,0.935762778344,8.821317733962,8.593144502186,8.800720626927,8.800720626927,7.724918617905,8.664805409729,8.658974855456,1.396474792809,8.714920794050,7.628335937962,7.643325991895,8.658974855455,8.655483351984,8.877026297320,8.771259953348,7.823705880250,7.783451849471,1.368952199205,1.462948238430,1.498637478279,7.756184833779,1.429188717883,1.492674128789,1.487167518768,1.449144005449,1.396474792809,7.756184833779,7.704978319371,7.703173286401,1.449144005449,7.704978319371,7.724918617905,7.724918617905,1.505097026103,1.393431701277,8.593144502186,8.668512966345,8.693721890723,8.714920794050,7.628335937962,8.680489486652,8.678577884664,8.561220411691,7.840181467333,7.823705880250,8.561220411691,7.847592250920,7.770188495941,7.795057528795,7.783451849471,7.703173286401,7.787241988895,7.735889213456,7.792074583122,7.792074583122,7.722974061879,7.787241988895,7.722974061879,7.722974061879,7.756184833779,7.735889213456,7.735889213456,7.724918617905,8.486870242649,8.498134001014,8.552655228171,8.877026297320,8.522787470847,7.800364102929,8.668512966344,8.693721890722,8.678577884664,8.678577884664,0.935762778344,0.935762778344,1.396474792809,1.498637478279,1.492674128789,1.462948238430,1.449144005449,8.460324413304,8.522787470847,8.714920794050,7.643325991895,8.498134001014,7.800371490590,8.680489486652,7.847592250920,7.722974061879,1.505097026103,1.393431701277,1.396474792809,8.658974855455,8.552655228171,7.628335937962,8.491644330360,7.860414678872,7.704978319371,7.834602873065,8.668512966344,7.703173286401,8.498134001014,7.756184833779,7.735889213456,7.787241988894,8.680489486652,7.724918617905,7.795057528795,7.795057528795,7.800364102929,7.800371490590,8.693721890722,8.693721890722,8.693721890722,8.543888628268,8.543888628268,8.543888628268,7.795057528795,7.800364102929,7.800371490590,7.632423644658,8.465260357692,7.643325991895,8.593144502186,8.594955039750,7.875373106464,8.714920794050,7.843724464838,7.847592250920,7.834602873065,0.827107023456,0.865558056548,1.429188717883,1.429188717883,8.702360294503,8.475619687618,7.628335937962,8.450063423028,7.888958342607,8.668512966344,8.594955039750,7.704978319371,7.835248261001,7.787241988894,7.850891296015,7.860414678872,7.850891296015,8.877026297320,8.491644330360,8.465260357692,8.593144502186,8.450063423028,8.702360294503,7.722974061879,7.756184833779,7.735889213456,8.658974855456,7.843724464838,8.658974855455,8.658974855455,8.678577884665,1.396474792809,8.308338790952,8.356544842449,8.410736290632,8.074476521699,8.051224407468,8.491644330360,7.888958342608,7.873297812435,7.867552921385,7.880165149980,7.834602873065,7.860414678872,7.835248261001,7.795057528795,7.880165149979,7.800371490590,7.800371490590,7.860414678872,7.628335937962,8.294069697190,8.029532294889,8.406328318993,8.678577884665,8.668512966344,8.314219791621,8.314219791622,8.583420113502,8.593144502186,8.475619687618,8.490114745055,8.475619687618,8.452682295013,8.490114745055,8.411042940898,8.411042940898,8.543888628268,8.452682295013,8.594955039750,7.867552921385,8.594955039750,7.843724464838,7.850891296015,7.873297812435,7.835248261001,7.873297812435,8.702360294503,8.693721890723,8.465260357692,8.358975332438,8.334562627807,8.281196136664,8.159974352541,8.195084231402,8.490246690572,8.333366026252,8.141911949230,8.159351604476,7.992945335115,8.378071985885,8.543888628268,7.927945945689,7.958120858632,8.378071985885,8.004693881681,7.965809694885,8.062069973197,8.029532294888,8.062069973197,7.897601101122,8.594955039750,8.040110073617,7.898019595064,7.880165149979,8.040110073617,8.019361697442,8.055578863557,7.898019595064,8.019361697443,8.055578863557,7.835248261001,1.151046965700,1.429188717883,7.643325991895,8.399370790474,8.115661033448,7.735889213456,7.888958342608,8.333366026252,7.787241988894,7.965809694885,7.843724464838,0.935762778344,1.151046965700,1.396474792809,8.702360294503,8.678577884665,7.643325991894,8.450063423028,7.724918617905,8.407531423181,8.293741849375,8.580492481068,8.580492481068,7.850891296015,7.850891296015,7.860414678872,1.429188717883,8.668512966344,8.490246690572,8.208778219859,8.264443801415,8.222786637651,8.139363412729,8.358975332438,8.314219791621,8.334562627807,7.834602873064,8.399370790475,8.175571808773,8.175571808773,8.293741849374,7.898019595064,7.628335937962,8.702360294502,8.583420113502,8.228904129528,7.999595252985,8.062069973198,8.019361697443,8.139363412729,7.834602873065,8.474163019735,8.474163019735,7.873297812435,8.040110073617,8.474163019735,8.474163019735,7.722974061879,7.756184833779,8.420415356346,8.365700917965,7.897601101122,7.923288372133,8.378071985885,7.874364245658,8.182898507314,8.228904129527,8.281196136664,8.399370790474,8.281196136664,8.159351604476,7.999595252985,8.333366026252,8.004693881681,8.004693881681,8.159351604476,8.144572110181,7.965809694885,8.144572110181,8.144572110181,8.594955039750,8.580492481068,8.583420113502,8.490246690571,8.451045642636,8.407531423181,8.257510862763,8.365700917965,8.091950543295,8.182898507314,8.143412332636,8.228904129527,7.923288372133,8.392812765706,7.874364245659,7.874364245659,8.392812765706,7.941231585039,8.116131533609,8.420415356346,7.941231585039,7.906010473937,8.420415356346,7.999595252985,7.906010473937,7.916298943668,7.916298943668,8.116131533609,8.420415356346,8.116131533609,8.702360294503,8.543888628268,8.358975332438,8.264443801415,8.451045642636,8.208778219860,7.939011472850,7.835248261001,8.580492481068,8.583420113502,7.787241988894,7.800371490590,8.222786637651,8.490246690571,8.396159247823,8.392177231582,8.208778219859,8.490246690571,7.860414678872,8.333366026253,8.392812765706,7.939011472851,8.333366026252,8.580492481068,8.143412332636,8.365700917965,8.283468574513,8.257510862764,8.360045484640,8.396159247823,8.102190923308,8.257510862764,8.360045484640,8.396159247823,7.906010473938,8.102190923308,8.366266353921,8.257510862764,7.941231585039,7.916298943669,8.296779755500,8.366266353921,8.296779755500,8.296779755500,7.916475582455,7.916475582455,7.916475582455,7.951294599246,7.925797796790,7.951294599246,7.925797796790,7.925797796790,7.979389920093,7.979389920093,7.979389920092,7.979389920093,7.951294599246,7.951294599246,8.702360294503,7.628335937962,7.643325991894,8.580492481068,8.091950543295,7.906010473937,8.102190923308,7.916298943668,7.951294599246,8.583420113502,8.583420113502,8.474163019735,8.451045642636,8.418397633885,8.392177231582,8.420415356346,8.394278940145,7.834602873065,8.265842774275,8.091950543295,8.265842774274,8.043493745026,7.874364245658,8.043493745026,8.257510862764,8.360045484640,8.366266353921,8.296779755500,8.102190923308,7.925797796790,7.925797796789,8.583420113502,8.490246690572,8.392177231582,8.394278940145,8.394278940145,8.283468574513,8.234634608050,8.000304516139,8.283468574513,8.234634608050,8.043493745026,8.265842774274,8.210787135434,8.098987965513,8.122510578287,8.098987965513,8.090283818107,8.090283818107,8.210787135434,8.135303683644,8.122510578287,8.192333501205,8.135303683644,8.135303683644,8.250675163996,8.250675163996,7.988531103167,7.988531103167,8.192333501205,8.120509757573,8.192849084470,8.192333501204,8.120509757573,7.988531103167,8.250675163996,7.988531103168,8.122510578287,8.192849084470,7.979389920093,8.120509757573,8.120509757573,8.702360294503,8.451045642636,8.396159247823,7.843724464838,8.000304516139,8.234634608050,8.098987965513,8.250675163996,8.234634608050,8.192849084470,8.702360294503,8.474163019735,8.451045642636,7.916475582455,8.418397633885,8.418397633885,8.283468574513,8.392177231583,8.392177231583,8.210787135434,8.091950543294,8.091950543294,8.360045484640,8.360045484640,8.580492481068,8.583420113502,7.873297812435,7.835248261001,7.906010473937,8.396159247823,8.296779755500,8.265842774275,8.366266353921,8.366266353921,8.122510578287,8.192333501205,8.135303683644,8.135303683644,8.120509757573,8.702360294503,8.580492481068,8.043493745026,7.874364245658,7.874364245659,7.940193187348,7.940193187348,7.940193187349,8.418397633884,8.418397633885,8.192333501204,8.090283818107,8.090283818107,8.090283818107,8.192849084470,8.192849084470,8.451045642636,7.860414678872,7.860414678872,8.394278940145,7.916298943668,8.000304516139,7.979389920093,7.951294599246,8.000304516139,8.102190923308,8.043493745026,8.418397633884,8.250675163996,8.210787135434,8.210787135434,8.122510578287,8.418397633885,8.234634608050,8.098987965513,8.098987965513,7.940193187348,7.940193187348,7.940193187348,8.234634608050,7.940193187348,8.210787135434,7.787241988894,8.296779755500,8.283468574513,7.835248261001,7.850891296015,8.102190923308,8.265842774274,8.265842774274,7.988531103167,7.988531103167,8.394278940145,8.392177231582,8.366266353921,8.360045484640,7.835248261001,8.283468574513,8.043493745026,8.250675163996,8.135303683644,8.000304516139,8.090283818107,8.000304516139,8.192849084470,8.192849084470,1.429188717883,1.396474792810,1.396474792810,8.583420113502,7.843724464838,8.192333501204,8.098987965513,8.122510578288,8.120509757573,8.418397633885,8.418397633885,8.192849084470,7.860414678872,8.580492481068,8.580492481068,8.583420113502,8.394278940145,7.787241988895,7.906010473937,7.916475582455,7.787241988895,7.916475582455,7.787241988894,8.283468574513,8.122510578287,8.283468574513,8.283468574513,8.418397633885,7.988531103167,7.988531103167,7.835248261001,7.940193187348,8.122510578287,8.192849084470,7.988531103167,7.860414678872,7.988531103167,8.283468574513,7.940193187348,8.192849084470,8.122510578287,8.122510578287,7.835248261001,7.940193187348,]
    ref_states = np.asarray(ref_states)

    # sort ref_states
    ref_states = np.sort(ref_states)

    diffs = np.abs(ref_states - (en - cc_energy))
    # for i in range (0,len(en)):
    #     assert np.isclose(ref_states[i], en[i]-cc_energy, atol=1e-6)
    # assert np.allclose(ref_states, en - cc_energy, atol=1e-6)

    if np.all(diffs < 1e-6):
        print("All states are correct")
    else:
        print("Some states are incorrect")
        print("Differences: ", diffs)
        print("Max difference: ", np.max(diffs), " at index: ", np.argmax(diffs))
        raise AssertionError(f"Some states are incorrect. Max difference: {np.max(diffs)} at index: {np.argmax(diffs)}")


def ccsd_energy(t1, t2, f, g, o, v):
    """
    < 0 | e(-T) H e(T) | 0> :

    :param f:
    :param g:
    :param t1:
    :param t2:
    :param o:
    :param v:
    :return:
    """

    #	  1.0000 f(i,i)
    energy = 1.0 * einsum('ii', f[o, o])

    #	  1.0000 f(i,a)*t1(a,i)
    energy += 1.0 * einsum('ia,ai', f[o, v], t1)

    #	 -0.5000 <j,i||j,i>
    energy += -0.5 * einsum('jiji', g[o, o, o, o])

    #	  0.2500 <j,i||a,b>*t2(a,b,j,i)
    energy += 0.25 * einsum('jiab,abji', g[o, o, v, v], t2)

    #	 -0.5000 <j,i||a,b>*t1(a,i)*t1(b,j)
    energy += -0.5 * einsum('jiab,ai,bj', g[o, o, v, v], t1, t1,
                            optimize=['einsum_path', (0, 1), (0, 1)])

    return energy
def integral_maps(f, eri, o, v):
    eri_ = {}
    eri_["oooo"] = eri[o,o,o,o]
    eri_["oovo"] = eri[o,o,v,o]
    eri_["oovv"] = eri[o,o,v,v]
    eri_["vooo"] = eri[v,o,o,o]
    eri_["vovo"] = eri[v,o,v,o]
    eri_["vovv"] = eri[v,o,v,v]
    eri_["vvoo"] = eri[v,v,o,o]
    eri_["vvvo"] = eri[v,v,v,o]
    eri_["vvvv"] = eri[v,v,v,v]

    f_ = {}
    f_["oo"] = f[o,o]
    f_["ov"] = f[o,v]
    f_["vo"] = f[v,o]
    f_["vv"] = f[v,v]

    Id_ = {}
    Id_["oo"] = np.zeros_like(f_["oo"])
    Id_["vv"] = np.zeros_like(f_["vv"])
    np.fill_diagonal(Id_["oo"], 1.0)
    np.fill_diagonal(Id_["vv"], 1.0)

    return f_, eri_, Id_

def residuals(t1, t2, f, eri):

    tmps_ = {}
    scalars_ = {}

    # rt2  = +1.00 <a,b||i,j>
    rt2  = 1.00 * np.einsum('abij->abij',eri["vvoo"])

    # rt1  = +1.00 f(a,i)
    rt1  = 1.00 * np.einsum('ai->ai',f["vo"])

    # rt1 += -1.00 f(j,i) t1(a,j)
    # flops: o1v1 += o2v1
    #  mems: o1v1 += o1v1
    rt1 -= einsum('ia->ai', np.einsum('ji,aj->ia',f["oo"],t1) )

    # rt1 += +1.00 f(a,b) t1(b,i)
    # flops: o1v1 += o1v2
    #  mems: o1v1 += o1v1
    rt1 += np.einsum('ab,bi->ai',f["vv"],t1)

    # rt1 += -1.00 f(j,b) t2(b,a,i,j)
    # flops: o1v1 += o2v2
    #  mems: o1v1 += o1v1
    rt1 -= np.einsum('jb,baij->ai',f["ov"],t2)

    # rt1 += +1.00 <j,a||b,i> t1(b,j)
    # flops: o1v1 += o2v2
    #  mems: o1v1 += o1v1
    rt1 -= np.einsum('ajbi,bj->ai',eri["vovo"],t1)

    # rt1 += -0.50 <k,j||b,i> t2(b,a,k,j)
    # flops: o1v1 += o3v2
    #  mems: o1v1 += o1v1
    rt1 += 0.50 * einsum('ia->ai', np.einsum('jkbi,bakj->ia',eri["oovo"],t2) )

    # rt1 += -0.50 <j,a||b,c> t2(b,c,i,j)
    # flops: o1v1 += o2v3
    #  mems: o1v1 += o1v1
    rt1 += 0.50 * np.einsum('ajbc,bcij->ai',eri["vovv"],t2)

    # rt1 += +0.50 <k,j||b,c> t1(a,j) t2(b,c,i,k)
    # flops: o1v1 += o3v2 o2v1
    #  mems: o1v1 += o2v0 o1v1
    rt1 -= 0.50 * einsum('ia->ai', np.einsum('jkbc,bcik,aj->ia',eri["oovv"],t2,t1,optimize='optimal') )

    # rt2 += +1.00 P(a,b) <k,a||i,j> t1(b,k)
    # flops: o2v2 += o3v2
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('aijb->abij', np.einsum('akij,bk->aijb',eri["vooo"],t1) )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += -1.00 P(i,j) f(k,j) t2(a,b,i,k)
    # flops: o2v2 += o3v2
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('jabi->abij', np.einsum('kj,abik->jabi',f["oo"],t2) )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += +1.00 P(i,j) <a,b||c,j> t1(c,i)
    # flops: o2v2 += o2v3
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('abji->abij', np.einsum('abcj,ci->abji',eri["vvvo"],t1) )
    rt2 += np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 -= einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += +1.00 P(a,b) f(a,c) t2(c,b,i,j)
    # flops: o2v2 += o2v3
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * np.einsum('ac,cbij->abij',f["vv"],t2)
    rt2 += np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 -= einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += +0.50 <l,k||i,j> t2(a,b,l,k)
    # flops: o2v2 += o4v2
    #  mems: o2v2 += o2v2
    rt2 -= 0.50 * einsum('ijab->abij', np.einsum('klij,ablk->ijab',eri["oooo"],t2) )

    # rt2 += +1.00 P(i,j) P(a,b) <k,a||c,j> t2(c,b,i,k)
    # flops: o2v2 += o3v3
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('ajbi->abij', np.einsum('akcj,cbik->ajbi',eri["vovo"],t2) )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    rt2 += einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    rt2 -= einsum('baji->abij', np.einsum('baji->baji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += +0.50 <a,b||c,d> t2(c,d,i,j)
    # flops: o2v2 += o2v4
    #  mems: o2v2 += o2v2
    rt2 += 0.50 * np.einsum('abcd,cdij->abij',eri["vvvv"],t2)

    # rt2 += -1.00 <l,k||i,j> t1(a,k) t1(b,l)
    # flops: o2v2 += o4v1 o3v2
    #  mems: o2v2 += o3v1 o2v2
    rt2 += einsum('bija->abij', np.einsum('bl,klij,ak->bija',t1,eri["oooo"],t1,optimize='optimal') )

    # rt2 += -0.50 P(i,j) <l,k||c,d> t2(a,b,i,l) t2(c,d,j,k)
    # flops: o2v2 += o3v2 o3v2
    #  mems: o2v2 += o2v0 o2v2
    tmps_["perm_vvoo"]  = 0.50 * einsum('jabi->abij', np.einsum('klcd,cdjk,abil->jabi',eri["oovv"],t2,t2,optimize='optimal') )
    rt2 += np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 -= einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += -1.00 P(a,b) f(k,c) t1(a,k) t2(c,b,i,j)
    # flops: o2v2 += o3v2 o3v2
    #  mems: o2v2 += o3v1 o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('bija->abij', np.einsum('kc,cbij,ak->bija',f["ov"],t2,t1,optimize='optimal') )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += +1.00 P(i,j) P(a,b) <k,a||c,j> t1(b,k) t1(c,i)
    # flops: o2v2 += o3v2 o3v2
    #  mems: o2v2 += o3v1 o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('ajib->abij', np.einsum('akcj,ci,bk->ajib',eri["vovo"],t1,t1,optimize='optimal') )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    rt2 += einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    rt2 -= einsum('baji->abij', np.einsum('baji->baji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += -0.50 <l,k||c,d> t2(c,a,l,k) t2(d,b,i,j)
    # flops: o2v2 += o2v3 o2v3
    #  mems: o2v2 += o0v2 o2v2
    rt2 += 0.50 * np.einsum('klcd,calk,dbij->abij',eri["oovv"],t2,t2,optimize='optimal')

    # rt2 += -0.50 <l,k||c,d> t2(c,a,i,j) t2(d,b,l,k)
    # flops: o2v2 += o2v3 o2v3
    #  mems: o2v2 += o0v2 o2v2
    rt2 += 0.50 * einsum('baij->abij', np.einsum('klcd,dblk,caij->baij',eri["oovv"],t2,t2,optimize='optimal') )

    # rt2 += -1.00 <a,b||c,d> t1(c,j) t1(d,i)
    # flops: o2v2 += o1v4 o2v3
    #  mems: o2v2 += o1v3 o2v2
    rt2 -= einsum('abji->abij', np.einsum('abcd,cj,di->abji',eri["vvvv"],t1,t1,optimize='optimal') )

    # rt2 += -1.00 P(i,j) P(a,b) <l,k||c,j> t1(a,k) t2(c,b,i,l)
    # flops: o2v2 += o4v2 o3v2
    #  mems: o2v2 += o3v1 o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('jbia->abij', np.einsum('klcj,cbil,ak->jbia',eri["oovo"],t2,t1,optimize='optimal') )
    rt2 += np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 -= einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    rt2 -= einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    rt2 += einsum('baji->abij', np.einsum('baji->baji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += +0.50 P(a,b) <k,a||c,d> t1(b,k) t2(c,d,i,j)
    # flops: o2v2 += o3v3 o3v2
    #  mems: o2v2 += o3v1 o2v2
    tmps_["perm_vvoo"]  = 0.50 * einsum('aijb->abij', np.einsum('akcd,cdij,bk->aijb',eri["vovv"],t2,t1,optimize='optimal') )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += +1.00 P(i,j) <l,k||c,d> t2(c,a,j,k) t2(d,b,i,l)
    # flops: o2v2 += o3v3 o3v3
    #  mems: o2v2 += o2v2 o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('ajbi->abij', np.einsum('klcd,cajk,dbil->ajbi',eri["oovv"],t2,t2,optimize='optimal') )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # flops: o1v1  = o2v2
    #  mems: o1v1  = o1v1
    tmps_["1_ov"]  = 1.00 * np.einsum('jkbc,bj->kc',eri["oovv"],t1)

    # rt1 += +1.00 <k,j||b,c> t2(c,a,i,k) t1(b,j)
    # flops: o1v1 += o2v2
    #  mems: o1v1 += o1v1
    rt1 -= np.einsum('caik,kc->ai',t2,tmps_["1_ov"])

    # rt2 += +1.00 P(a,b) <l,k||c,d> t1(a,l) t2(d,b,i,j) t1(c,k)
    # flops: o2v2 += o3v2 o3v2
    #  mems: o2v2 += o3v1 o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('bija->abij', np.einsum('dbij,ld,al->bija',t2,tmps_["1_ov"],t1,optimize='optimal') )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # flops: o3v1  = o3v2
    #  mems: o3v1  = o3v1
    tmps_["2_ooov"]  = 1.00 * np.einsum('bi,jkbc->ijkc',t1,eri["oovv"])

    # rt1 += +0.50 <k,j||b,c> t2(c,a,k,j) t1(b,i)
    # flops: o1v1 += o3v2
    #  mems: o1v1 += o1v1
    rt1 -= 0.50 * np.einsum('cakj,ijkc->ai',t2,tmps_["2_ooov"])

    # rt2 += +1.00 P(i,j) P(a,b) <l,k||c,d> t1(a,k) t2(d,b,i,l) t1(c,j)
    # flops: o2v2 += o4v2 o3v2
    #  mems: o2v2 += o3v1 o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('bija->abij', np.einsum('dbil,jkld,ak->bija',t2,tmps_["2_ooov"],t1,optimize='optimal') )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    rt2 += einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    rt2 -= einsum('baji->abij', np.einsum('baji->baji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # flops: o0v2  = o1v3
    #  mems: o0v2  = o0v2
    tmps_["3_vv"]  = 1.00 * np.einsum('ajbc,bj->ac',eri["vovv"],t1)

    # rt1 += +1.00 <j,a||b,c> t1(b,j) t1(c,i)
    # flops: o1v1 += o1v2
    #  mems: o1v1 += o1v1
    rt1 -= np.einsum('ac,ci->ai',tmps_["3_vv"],t1)

    # rt2 += +1.00 P(a,b) <k,a||c,d> t2(d,b,i,j) t1(c,k)
    # flops: o2v2 += o2v3
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * np.einsum('ad,dbij->abij',tmps_["3_vv"],t2)
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]
    del tmps_["3_vv"]

    # flops: o2v0  = o2v1 o3v1 o2v0
    #  mems: o2v0  = o2v0 o2v0 o2v0
    tmps_["4_oo"]  = 1.00 * np.einsum('ci,kc->ik',t1,tmps_["1_ov"])
    tmps_["4_oo"] += einsum('ki->ik', np.einsum('jkbi,bj->ki',eri["oovo"],t1) )
    del tmps_["1_ov"]

    # rt1 += +1.00 <k,j||b,c> t1(a,k) t1(b,j) t1(c,i)
    #     += +1.00 <k,j||b,i> t1(a,k) t1(b,j)
    # flops: o1v1 += o2v1
    #  mems: o1v1 += o1v1
    rt1 -= np.einsum('ak,ik->ai',t1,tmps_["4_oo"])

    # rt2 += +1.00 P(i,j) <l,k||c,d> t2(a,b,i,l) t1(c,k) t1(d,j)
    #     += +1.00 P(i,j) <l,k||c,j> t2(a,b,i,l) t1(c,k)
    # flops: o2v2 += o3v2
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * np.einsum('abil,jl->abij',t2,tmps_["4_oo"])
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]
    del tmps_["4_oo"]

    # flops: o2v0  = o2v1
    #  mems: o2v0  = o2v0
    tmps_["5_oo"]  = 1.00 * np.einsum('bi,jb->ij',t1,f["ov"])

    # rt1 += -1.00 f(j,b) t1(a,j) t1(b,i)
    # flops: o1v1 += o2v1
    #  mems: o1v1 += o1v1
    rt1 -= np.einsum('aj,ij->ai',t1,tmps_["5_oo"])

    # rt2 += -1.00 P(i,j) f(k,c) t2(a,b,i,k) t1(c,j)
    # flops: o2v2 += o3v2
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * np.einsum('abik,jk->abij',t2,tmps_["5_oo"])
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]
    del tmps_["5_oo"]

    # flops: o4v0  = o4v1
    #  mems: o4v0  = o4v0
    tmps_["6_oooo"]  = 1.00 * np.einsum('di,jkld->ijkl',t1,tmps_["2_ooov"])
    del tmps_["2_ooov"]

    # rt2 += -0.50 <l,k||c,d> t2(a,b,l,k) t1(c,j) t1(d,i)
    # flops: o2v2 += o4v2
    #  mems: o2v2 += o2v2
    rt2 += 0.50 * np.einsum('ablk,ijkl->abij',t2,tmps_["6_oooo"])

    # rt2 += +1.00 <l,k||c,d> t1(a,k) t1(b,l) t1(c,j) t1(d,i)
    # flops: o2v2 += o4v1 o3v2
    #  mems: o2v2 += o3v1 o2v2
    rt2 -= einsum('aijb->abij', np.einsum('ak,ijkl,bl->aijb',t1,tmps_["6_oooo"],t1,optimize='optimal') )
    del tmps_["6_oooo"]

    # flops: o4v0  = o4v2
    #  mems: o4v0  = o4v0
    tmps_["7_oooo"]  = 1.00 * np.einsum('cdij,klcd->ijkl',t2,eri["oovv"])

    # rt2 += +0.25 <l,k||c,d> t2(a,b,l,k) t2(c,d,i,j)
    # flops: o2v2 += o4v2
    #  mems: o2v2 += o2v2
    rt2 -= 0.25 * np.einsum('ablk,ijkl->abij',t2,tmps_["7_oooo"])

    # rt2 += -0.50 <l,k||c,d> t1(a,k) t1(b,l) t2(c,d,i,j)
    # flops: o2v2 += o4v1 o3v2
    #  mems: o2v2 += o3v1 o2v2
    rt2 += 0.50 * einsum('aijb->abij', np.einsum('ak,ijkl,bl->aijb',t1,tmps_["7_oooo"],t1,optimize='optimal') )
    del tmps_["7_oooo"]

    # flops: o2v2  = o2v3
    #  mems: o2v2  = o2v2
    tmps_["8_vovo"]  = 1.00 * np.einsum('akcd,cj->akdj',eri["vovv"],t1)

    # rt2 += -1.00 P(i,j) P(a,b) <k,a||c,d> t2(d,b,i,k) t1(c,j)
    # flops: o2v2 += o3v3
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('ajbi->abij', np.einsum('akdj,dbik->ajbi',tmps_["8_vovo"],t2) )
    rt2 += np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 -= einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    rt2 -= einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    rt2 += einsum('baji->abij', np.einsum('baji->baji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += -1.00 P(a,b) <k,a||c,d> t1(b,k) t1(c,j) t1(d,i)
    # flops: o2v2 += o3v2 o3v2
    #  mems: o2v2 += o3v1 o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('ajib->abij', np.einsum('akdj,di,bk->ajib',tmps_["8_vovo"],t1,t1,optimize='optimal') )
    rt2 += np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 -= einsum('baij->abij', np.einsum('baij->baij',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]
    del tmps_["8_vovo"]

    # flops: o4v0  = o4v1
    #  mems: o4v0  = o4v0
    tmps_["9_oooo"]  = 1.00 * np.einsum('klcj,ci->klji',eri["oovo"],t1)

    # rt2 += +0.50 P(i,j) <l,k||c,j> t2(a,b,l,k) t1(c,i)
    # flops: o2v2 += o4v2
    #  mems: o2v2 += o2v2
    tmps_["perm_vvoo"]  = 0.50 * einsum('abji->abij', np.einsum('ablk,klji->abji',t2,tmps_["9_oooo"]) )
    rt2 -= np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 += einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]

    # rt2 += -1.00 P(i,j) <l,k||c,j> t1(a,k) t1(b,l) t1(c,i)
    # flops: o2v2 += o4v1 o3v2
    #  mems: o2v2 += o3v1 o2v2
    tmps_["perm_vvoo"]  = 1.00 * einsum('ajib->abij', np.einsum('ak,klji,bl->ajib',t1,tmps_["9_oooo"],t1,optimize='optimal') )
    rt2 += np.einsum('abij->abij',tmps_["perm_vvoo"])
    rt2 -= einsum('abji->abij', np.einsum('abji->abji',tmps_["perm_vvoo"]) )
    del tmps_["perm_vvoo"]
    del tmps_["9_oooo"]

    return rt1, rt2

def build_Hbar(t1, t2, f, eri, Id):
    tmps_ = {}
    scalars_ = {}

    # INSERTED CODE

    return H00, Hs0, H0s, Hd0, H0d, Hss, Hsd, Hds, Hdd

if __name__ == "__main__":
    main()

